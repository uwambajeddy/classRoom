import Field from "../Field";
import cast from "../util/restoreType";
import getFieldPath from "../util/getFieldPath";
import FieldSizeLimitError from "../error/FieldSizeLimitError";
/**
 * @api private
 */

const onField = ({
  restoreTypes,
  limits
}, cb) => (fieldname, value, fieldnameTruncated, valueTruncated, enc, mime) => {
  if (valueTruncated) {
    return cb(new FieldSizeLimitError(`Limit reached: Available up to ${limits.fieldSize} bytes per field.`));
  }

  try {
    const path = getFieldPath(fieldname);
    value = restoreTypes ? cast(value) : value;
    cb(null, [path, new Field({
      fieldname,
      value,
      fieldnameTruncated,
      valueTruncated,
      enc,
      mime
    })]);
  } catch (err) {
    cb(err);
  }
};

export default onField;